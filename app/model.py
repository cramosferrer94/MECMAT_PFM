# app/model.pyimport pandas as pdimport numpy as npimport osimport picklefrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LinearRegressionfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_scoredef train_model():    # Cargar los archivos CSV. Asegúrate de que estos archivos estén en la ubicación correcta.    historical_data = pd.read_csv("app/HISTORICAL DATA.csv")    production_times = pd.read_csv("app/PRODUCTION TIMES.csv")        # Convertir la columna 'DEMAND_DATE' a tipo datetime    historical_data["DEMAND_DATE"] = pd.to_datetime(historical_data["DEMAND_DATE"], format="%Y-%m")        # Unir ambos datasets usando la columna "PROD_ID" mediante un left join    merged_data = historical_data.merge(production_times, on="PROD_ID", how="left")        # Calcular el tiempo total de producción mensual por producto (en minutos)    merged_data["TOTAL_TIME"] = merged_data["DEMAND_QUANT"] * merged_data["PROD_TIME"]        # Extraer características temporales: Año y Mes    merged_data["YEAR"] = merged_data["DEMAND_DATE"].dt.year    merged_data["MONTH"] = merged_data["DEMAND_DATE"].dt.month        # Calcular la demanda promedio histórica por producto y mapearla    prod_avg_demand = merged_data.groupby("PROD_ID")["DEMAND_QUANT"].mean().to_dict()    merged_data["PROD_AVG_DEMAND"] = merged_data["PROD_ID"].map(prod_avg_demand)        # Definir la variable objetivo: demanda del siguiente mes (shift(-1))    merged_data["TARGET"] = merged_data.groupby("PROD_ID")["DEMAND_QUANT"].shift(-1)        # Crear feature de retardo (lag1): demanda del mes anterior (shift(1))    merged_data["lag1"] = merged_data.groupby("PROD_ID")["DEMAND_QUANT"].shift(1)        # Crear medias móviles de 3 y 6 meses    merged_data["moving_avg_3"] = merged_data.groupby("PROD_ID")["DEMAND_QUANT"].transform(lambda x: x.rolling(window=3).mean())    merged_data["moving_avg_6"] = merged_data.groupby("PROD_ID")["DEMAND_QUANT"].transform(lambda x: x.rolling(window=6).mean())        # Eliminar filas con valores nulos    merged_data = merged_data.dropna()        # Definir las variables predictoras (features) y la variable objetivo    features = ["YEAR", "MONTH", "TIRE_SALES", "PROD_AVG_DEMAND", "lag1", "moving_avg_3", "moving_avg_6"]    X = merged_data[features]    y = merged_data["TARGET"]        # Dividir los datos en conjunto de entrenamiento y prueba (esto es opcional para evaluar el modelo)    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)        # Entrenar el modelo de regresión lineal    model = LinearRegression()    model.fit(X_train, y_train)        # Evaluación rápida del modelo (opcional)    y_pred = model.predict(X_test)    mae = mean_absolute_error(y_test, y_pred)    rmse = np.sqrt(mean_squared_error(y_test, y_pred))    r2 = r2_score(y_test, y_pred)        print("Modelo entrenado:")    print(f"MAE = {mae:.2f}")    print(f"RMSE = {rmse:.2f}")    print(f"R2 = {r2:.4f}")        # Guardar el modelo entrenado en pickle    with open("model.pkl", "wb") as f:        pickle.dump(model, f)        print("Modelo guardado en 'model.pkl'")        return modeldef get_trained_model():    if os.path.exists("model.pkl"):        with open("model.pkl", "rb") as f:            model = pickle.load(f)        print("Modelo cargado desde 'model.pkl'")    else:        print("'model.pkl' no encontrado. Entrenando el modelo...")        model = train_model()    return modeldef predict_from_features(input_features, model):    # Convertir el diccionario a DataFrame (una sola muestra)    df = pd.DataFrame([input_features])    prediction = model.predict(df)    return prediction[0]if __name__ == "__main__":    # Si se ejecuta este módulo directamente, se entrena o carga el modelo y se realiza una predicción de ejemplo.    model = get_trained_model()    ejemplo_entrada = {        "YEAR": 2024,        "MONTH": 12,        "TIRE_SALES": 4000,        "PROD_AVG_DEMAND": 4100,        "lag1": 4050,        "moving_avg_3": 4075,        "moving_avg_6": 4060    }    resultado = predict_from_features(ejemplo_entrada, model)    print("Predicción de ejemplo:", resultado)